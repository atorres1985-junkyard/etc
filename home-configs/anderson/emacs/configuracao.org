# -*- mode: org; coding: utf-8-unix; fill-column: 80 -*-

#+title: Configuração do Emacs

Este arquivo conterá minha modesta configuração, devidamente documentada, do
Emacs.

Para desenovelá-la (/untangle/ no original saxão), use =M-x org-babel-tangle=
(ou =C-c C-v t=).

* Early Init

Desde a versão 27.1, o Emacs separa a inicialização em dois
estágios. [fn:lnk-EarlyInitFile] Antes da inicialização do sistema de pacotes e
da interface gráfica, o Emacs carrega o arquivo =early-init.el=.

** Header

Porque isso precisa gerar um arquivo bonito.

#+begin_src emacs-lisp :tangle ./early-init.el
  ;;; early-init.el --- Emacs early init file -*- lexical-binding: t; no-byte-compile: nil -*-

  ;;; Commentary:
  ;;; Arquivo de Inicialização Prévia do Emacs
  ;;;

  ;;; Code:

#+end_src

** Early Init - Tempo Inicial

Aqui registramos o momento inicial que o =early-init.el= foi carregado.

#+begin_src emacs-lisp :tangle ./early-init.el
  (defconst atorres-1985|early-init-start-time (current-time)
    "Early init start time.")
#+end_src

** Gerenciador de Pacotes

Os pacotes são instalados via Nix+Nixpkgs [fn:lnk-nixpkgs], então é interessante
impedir que o Emacs tente gerenciá-los.

#+begin_src emacs-lisp :tangle ./early-init.el
  (setopt package-archives nil
          package-enable-at-startup nil)
#+end_src

** GUI

#+begin_src emacs-lisp :tangle ./early-init.el
  (mapc (lambda (mode)
          (when (fboundp mode)
            (apply mode '(-1))))
        '(menu-bar-mode
          scroll-bar-mode
          tool-bar-mode))

  (setopt frame-inhibit-implied-resize t
          frame-resize-pixelwise t)

  (advice-add #'x-apply-session-resources :override #'ignore)

  ;; Removing the white flash
  (when (display-graphic-p)
    (set-face-background 'default "#282a36" nil)
    (set-face-foreground 'default "#f8f8f2" nil))
#+end_src

** Emacs Debug

Se a variável =EMACS_DEBUG= for setada, então ela habilita a depuração já na
inicialização e também quando ocorrer um erro.

#+begin_src emacs-lisp :tangle ./early-init.el
  (when (getenv-internal "EMACS_DEBUG")
    (setopt debug-on-error t)
    (setq-default init-file-debug t))
#+end_src

** Mini Otimizações

Essa mini otimização faz o Emacs carregar o =file-name-handler-alist= apenas
depois de realmente ter iniciado.

#+begin_src emacs-lisp :tangle ./early-init.el
  (setq backup-file-name-handler-alist file-name-handler-alist
        file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist backup-file-name-handler-alist)
              (makunbound 'backup-file-name-handler-alist)))
#+end_src

E essa atrasa o coletor de lixo do Emacs - o pacote =gcmh= cuida disso mais
tarde.

Eu costumava setar isso para =most-positive-fixnum=, mas isso me parece um tanto
desnecessário. 4GB (=#x100000000=) devem bastar.

#+begin_src emacs-lisp :tangle ./early-init.el
  (setopt gc-cons-threshold #x100000000
          gc-cons-percentage 0.9)
#+end_src

** Early Init - Tempo Final

Aqui registramos o momento em que o carregamento do =early-init.el= foi
encerrado.

#+begin_src emacs-lisp :tangle ./early-init.el
  (defconst atorres-1985|early-init-finish-time (current-time)
    "Early init finish time.")
#+end_src

** Footer

Porque isso precisa gerar um arquivo bonito.

#+begin_src emacs-lisp :tangle ./early-init.el
  (provide 'early-init)

  ;; Local Variables:
  ;; mode: emacs-lisp
  ;; coding: utf-8-unix
  ;; fill-column: 80
  ;; End:

  ;;; early-init.el ends here
#+end_src

* Init

O arquivo tradicional de configuração do Emacs é o =init.el=. [fn:lnk-InitFile]

** Header

Porque isso precisa gerar um arquivo bonito.

#+begin_src emacs-lisp :tangle ./init.el
  ;;; init.el --- Emacs init file -*- lexical-binding: t; no-byte-compile: nil -*-

  ;;; Commentary:
  ;;  Arquivo de inicialização do Emacs

  ;;; Code:
#+end_src

** Early Init - Tempo Inicial

Aqui registramos o momento inicial que o =init.el= foi carregado.

#+begin_src emacs-lisp :tangle ./init.el
  (defconst atorres-1985|init-start-time (current-time)
    "Init start time.")
#+end_src

** Framework

Estou testando vários frameworks até sossegar em algum. A bola da vez de hoje é
o Setup! [fn:lnk-setupel]

** Requerimentos Iniciais

=cl-lib= é uma biblioteca que implementa diversas funcionalidades presentes em
Common Lisp - lembre-se, estamos no Emacs e não no CLISP [fn:lnk-clisp] REPL :)

#+begin_src emacs-lisp :tangle ./init.el
  (require 'cl-lib)
  (require 'package)

  (package-initialize)

  (require 'setup)
#+end_src

** Variáveis de Ambiente e Constantes

#+begin_src emacs-lisp :tangle ./init.el
  (unless (getenv "EDITOR")
    (setenv "EDITOR" "emacsclient"))

  (unless (getenv "VISUAL")
    (setenv "VISUAL" "emacsclient"))

  (unless (getenv "PAGER")
    (setenv "PAGER" "cat"))

  (defconst home-directory (getenv "HOME")
    "Home directory.")

  (defconst user-emacs-directory-log (concat user-emacs-directory "log/")
    "Logs directory.")
#+end_src

** no-littering

O pacote =no-littering= [fn:lnk-no-littering] serve para coletar todos os
diversos tipos de arquivos que os demais pacotes do Emacs geram enquanto são
executados, em especial caches e configurações temporárias.

Em razão disso, ele deve ser chamado o mais cedo possível, dado que todos os
demais pacotes se beneficiarão dele.

#+begin_src emacs-lisp :tangle ./init.el
  (setup no-littering
    (setq
     no-littering-etc-directory (expand-file-name ".cache/emacs/etc/" home-directory)
     no-littering-var-directory (expand-file-name ".cache/emacs/var/" home-directory))
    (:require no-littering)
    (dolist (dir `(,no-littering-etc-directory
           ,no-littering-var-directory))
      (unless (file-exists-p dir)
    (make-directory dir t))))
#+end_src

** Seção: Funções Utilitárias

Talvez elas mereçam virar um pacote pessoal - assim que eu aprender a fazer
pacotes no Emacs Lisp!

#+begin_src emacs-lisp :tangle ./init.el
  (defmacro atorres-1985|emit-backup-pair (extension directory)
    "Return a pair (regex . directory) suitable for use as `backup-directory-alist'.

  The car of this pair is `EXTENSION' in regexp form, and the cdr is a
  subdirectory of `DIRECTORY' named `EXTENSION'."

    `(cons (rx "." ,extension eol)
           (expand-file-name ,extension ,directory)))

  (defmacro atorres-1985|pretty-expanded-form (form)
    "Output pretty-printed expanded form of given `FORM'."
    `(progn
       (pp (macroexpand-1 ',form))
       nil))

  (defun atorres-1985|sort-words (reverse begin end)
    "Sort words in region alphabetically, in REVERSE if negative.

  Region is defined between BEGIN and END.

  Prefixed with negative \\[universal-argument], sorts in reverse.

  The variable `sort-fold-case' determines whether alphabetic case affects the
  sort order.

  See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\w+" "\\&" begin end))

  (defun atorres-1985|sort-symbols (reverse begin end)
    "Sort symbols in region alphabetically, in REVERSE if negative.

  Region is defined between BEGIN and END.

  Prefixed with negative \\[universal-argument], sorts in reverse.

  The variable `sort-fold-case' determines whether alphabetic case affects the
  sort order.

  See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\(\\sw\\|\\s_\\)+" "\\&" begin end))

  (defun atorres-1985|show-percentage ()
    "Calculate and display the percentage before and after the current point."
    (interactive)
    (let* ((frac (/ (* 1.0 (point)) (point-max)))
           (perc (* 100 frac))
           (rest (- 100 perc)))
      (message "atorres-1985|show-percentage: %d + %d = %d"
               perc rest (+ perc rest))))

  (defun atorres-1985|move-region (start end n)
    "Move the region bewteen START and END by N lines."
    (interactive "r\np")
    (let
        ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (let
          ((start (point)))
        (insert line-text)
        (setq deactivate-mark nil)
        (set-mark start))))

  (defun atorres-1985|move-region-up (start end n)
    "Move the region between START and END up by N lines."
    (interactive "r\np")
    (atorres-1985|move-region start end (if (null n) -1 (- n))))

  (defun atorres-1985|move-region-down (start end n)
    "Move the region between START and END down by N lines."
    (interactive "r\np")
    (atorres-1985|move-region start end (if (null n) 1 n)))

  (defun atorres-1985|toggle-fullscreen ()
    "Toggle fullscreen."
    (interactive)
    (set-frame-parameter nil 'fullscreen
                         (if (frame-parameter nil 'fullscreen)
                             nil
                           'fullboth)))

  (defun atorres-1985|find-init-file ()
    "Open Emacs init file."
    (interactive)
    (find-file user-init-file))

  (defun atorres-1985|load-directory (directory)
    "Load extra scripts scattered on DIRECTORY."
    (when (file-directory-p directory)
      (dolist (file (directory-files directory nil "el$"))
        (load-file (concat directory "/" file)))))

  (defun atorres-1985|add-to-list-after (list-var old new &optional compare-fn)
    "Add NEW after OLD in the ordered list LIST-VAR.

  OLD is compared with COMPARE-FN which defaults to `equal'.

  NEW is not added if it already exists after OLD, also according
  to COMPARE-FN, making this function idempotent."
    (let ((cmp (or compare-fn #'equal)))
      (cl-do ((x (symbol-value list-var) (cdr x)))
          ((null x))
        (when (and (funcall cmp (car x) old)
                   (not (funcall cmp (cadr x) new)))
          (setf (cdr x) (cons new (cdr x))))))
    (symbol-value list-var))

  (defun atorres-1985|buffer-file-or-directory-name (buf)
    "The file BUF is visiting; works if it's a `dired' buffer too."
    (with-current-buffer buf
      (or buffer-file-name
          (and (eq major-mode 'dired-mode)
               (boundp 'dired-directory)
               (file-name-directory
                (if (stringp dired-directory)
                    dired-directory
                  (car dired-directory)))))))

  (defmacro atorres-1985|with-face (string &rest face-properties)
    "A thin wrapper on propertize.

  Return a copy of STRING with FACE-PROPERTIES added."
    `(propertize ,string 'face (list ,@face-properties)))

  (defun atorres-1985|eshell-prompt ()
    "Custom eshell prompt."
    (let ((header-bg "#000"))
      (concat "\n"
              (atorres-1985|with-face (concat (eshell/pwd) " ")
                                      :background header-bg)
              (atorres-1985|with-face (format-time-string "(%Y-%m-%d %H:%M) "
                                                          (current-time))
                                      :background header-bg
                                      :foreground "#0000FF")
              (atorres-1985|with-face
               (or (ignore-errors
                     (format "(%s)"
                             (vc-responsible-backend default-directory)))
                   "")
               :background header-bg)
              (atorres-1985|with-face " "
                                      :background header-bg)
              (atorres-1985|with-face "|"
                                      :background "grey")
              (atorres-1985|with-face user-login-name
                                      :foreground "blue")
              "@"
              (atorres-1985|with-face "localhost"
                                      :foreground "green")
              (if (= (user-uid) 0)
                  (atorres-1985|with-face " #\n> "
                                          :foreground "red")
                (atorres-1985|with-face " $\n> "
                                        :foreground "green")))))

  (defun atorres-1985|string-make-clickable (string click-command &optional help-echo)
    "Create a clickable STRING according to \"33.19.8 Defining Clickable Text\".

  CLICK-COMMAND is what happens on click and HELP-ECHO or the
  documentation string of CLICK-COMMAND is the tooltip."
    (propertize
     string
     'mouse-face 'highlight
     'help-echo (concat "mouse-2: " (or help-echo
                                        (documentation click-command 'raw)))
     'keymap (let ((map (make-sparse-keymap)))
               (define-key map [mouse-2] click-command)
               (define-key map (kbd "RET") click-command)
               (define-key map [follow-link] 'mouse-face)
               map)))

  (defmacro atorres-1985|add-to-local-keymap (&rest definitions)
    "Add the DEFINITIONS to the current buffer's local keymap.

  The DEFINITIONS should be an alist of keys (arguments for `kbd')
  and commands.

  Probably shouldn't be chained too much, as it would create
  a deeply nested keymap inheritance structure."
    (let ((map (gensym)))
      `(let ((,map (make-sparse-keymap)))
         (set-keymap-parent ,map (current-local-map))
         ,@(mapcar
            (lambda (def)
              (list 'define-key map (kbd (car def)) `#',(cdr def)))
            definitions)
         (use-local-map ,map))))
#+end_src

** Seção Solta: C Hook

#+begin_src emacs-lisp :tangle no
  (defun atorres1985|c-hook ()
    "Hook for C."
    (setq-default indent-tabs-mode nil)
    (setq c-basic-offset 4
          c-indent-level 4
          c-default-style "bsd"))

  (add-hook 'c-mode-common-hook #'atorres1985|c-hook)
  (add-hook 'c-mode-common-hook #'smartparens-mode)
#+end_src

** Seção: Backups

Uma das coisas mais importantes que já configurei no Emacs e me salvou umas
tantas vezes foi o sisteminha de backups!

#+begin_src emacs-lisp :tangle ./init.el
  (let*
      ((backup-directory
        (expand-file-name ".text-backups" home-directory))
       (c-pair (atorres-1985|emit-backup-pair "c" backup-directory))
       (el-pair (atorres-1985|emit-backup-pair "el" backup-directory))
       (md-pair (atorres-1985|emit-backup-pair "md" backup-directory))
       (nix-pair (atorres-1985|emit-backup-pair "nix" backup-directory))
       (org-pair (atorres-1985|emit-backup-pair "org" backup-directory))
       (py-pair (atorres-1985|emit-backup-pair "py" backup-directory))
       (sh-pair (atorres-1985|emit-backup-pair "sh" backup-directory))
       (tex-pair (atorres-1985|emit-backup-pair "tex" backup-directory))
       (txt-pair (atorres-1985|emit-backup-pair "txt" backup-directory))
       (adoc-pair (atorres-1985|emit-backup-pair "adoc" backup-directory)))
    (setq backup-directory-alist
          `(("." . ,backup-directory)))
    (dolist (l `(,txt-pair
                 ,tex-pair
                 ,sh-pair
                 ,py-pair
                 ,org-pair
                 ,nix-pair
                 ,md-pair
                 ,el-pair
                 ,c-pair
                 ,adoc-pair))
      (unless (file-exists-p (cdr l))
        (make-directory (cdr l) t))
      (cl-pushnew l backup-directory-alist)))
#+end_src

** server

O pacote =server= vem por padrão no Emacs.

Este trecho de código carrega o servidor apenas uma vez.

#+begin_src emacs-lisp :tangle ./init.el
  (setup server
    (:require server)
    (unless (server-running-p)
      (server-start)))
#+end_src

** files

Outro pacote já presente no Emacs.

#+begin_src emacs-lisp :tangle ./init.el
  (setup files
    (setopt auto-save-default t
            backup-by-copying t
            delete-old-versions t
            kept-new-versions 5
            kept-old-versions 5
            make-backup-files t
            version-control t))
#+end_src

** recentf

#+begin_src emacs-lisp :tangle ./init.el
  (setup recentf
    (setopt recentf-max-saved-items 50)
    (recentf-mode 1))
#+end_src

** simple

Outro pacote já presente no Emacs.

#+begin_src emacs-lisp :tangle ./init.el
  (setup simple
    (setq-default line-move-visual nil)
    (setopt column-number-mode 1
          save-interprogram-paste-before-kill t))
#+end_src

** mouse

Outro pacote já presente no Emacs.

#+begin_src emacs-lisp :tangle ./init.el
  (setup mouse
    (setq mouse-yank-at-point t))
#+end_src

** mule

[[https://savannah.nongnu.org/projects/mule][MULE]] é o sistema de multi-linguagem do Emacs. [fn:lnk-International]

#+begin_src emacs-lisp :tangle ./init.el
  (setup mule
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8))
#+end_src

** vc-hooks

#+begin_src emacs-lisp :tangle ./init.el
  (setup vc-hooks
    (setq-default vc-follow-symlinks t)
    (setq vc-make-backup-files t))
#+end_src

** savehist

#+begin_src emacs-lisp :tangle ./init.el
  (setup savehist
    (:require savehist)
    (setopt history-length 25)
    (savehist-mode +1))
#+end_src

** which-key

#+begin_src emacs-lisp :tangle ./init.el
  (setup which-key
    (:require which-key)
    (which-key-mode))
#+end_src

** beginend

O pacote beginend [fn:lnk-beginend] re-mapeia os comandos =M-<= e =M->= (ou, mais
precisamente, o que quer que esteja atuando como =beginning-of-buffer= e
=end-of-buffer=) para ir até os "extremos lógicos" do documento, em vez de ir
até os extremos físicos. Por exemplo, em um documento do LaTeX [fn:lnk-latex] os
extremos lógicos são marcados por =\begin{document}= e =\end{document}=.

Os extremos físicos ainda são acessíveis, basta repetir o comando!

#+begin_src emacs-lisp :tangle ./init.el
  (setup beginend
    (:require beginend)
    (beginend-global-mode))
#+end_src

** show-paren-mode

#+begin_src emacs-lisp :tangle ./init.el
  (setup paren
    (setopt show-paren-delay 0
            show-paren-style 'parenthesis)
    (show-paren-mode t))
#+end_src

** bs

#+begin_src emacs-lisp :tangle ./init.el
  (setup bs
    (:require bs)
    (setopt bs-max-window-height 36
            bs-minimal-buffer-name-column 25))
#+end_src

** pdf-tools

O pacote pdf-tools [fn:lnk-pdftools] é uma suite PDF para o Emacs que renderiza e
armazena os arquivos PDF na memória.

#+begin_src emacs-lisp :tangle ./init.el
  (setup pdf-tools
    (:require pdf-tools)
    (pdf-tools-install))
#+end_src

** text-mode

#+begin_src emacs-lisp :tangle ./init.el
  (setup text-mode
    (:with-hook text-mode
      (:hook turn-on-visual-line-mode
             turn-on-auto-fill)))
#+end_src

** Org Mode

#+begin_src emacs-lisp :tangle no
  (setup org
    (setq org-html-htmlize-font-prefix "org-#"
          org-html-htmlize-output-type 'inline-css
          org-highlight-latex-and-related '(latex script)
          org-link-descriptive nil)
    (add-hook 'org-mode-hook 'flyspell-mode))
#+end_src

** crux

O pacote =crux= [fn:lnk-crux] é uma coleção de extensões ridiculamente úteis.

#+begin_src emacs-lisp :tangle ./init.el
  (setup crux
    (:require crux))
#+end_src

** hungry-delete

#+begin_src emacs-lisp :tangle ./init.el
  (setup hungry-delete
    (:require hungry-delete)
    (global-hungry-delete-mode))
#+end_src

** hardcore-mode

O pacote hardcore-mode [fn:lnk-hardcore-mode] torna impossível usar as setas do
teclado. Por padrão ele também torna impossível usar Enter e Backspace, mas isso
pode (deve?) ser mudado com as variáveis =too-hardcore-backspace= e
=too-hardcore-return=.

#+begin_src emacs-lisp :tangle ./init.el
  (setup hardcore-mode
    (setopt too-hardcore-backspace t
            too-hardcore-return t)
    (:require hardcore-mode)
    (global-hardcore-mode))
#+end_src

** blackout

#+begin_src emacs-lisp :tabgle ./init.el
  (setup blackout)
#+end_src

** unfill

O pacote =unfill= [fn:lnk-unfill] provê comandos para "recolar" regiões, parágrafos
etc.

#+begin_src emacs-lisp :tangle ./init.el
  (setup unfill)
#+end_src

** display-fill-column-indicator

#+begin_src emacs-lisp :tangle ./init.el
  (setup display-fill-column-indicator
    (:require display-fill-column-indicator)
    (global-display-fill-column-indicator-mode))
#+end_src

** nhexl-mode

#+begin_src emacs-lisp :tangle ./init.el
  (setup nhexl-mode)
#+end_src

** helpful

#+begin_src emacs-lisp :tangle ./init.el
  (setup helpful)
#+end_src

** eshell

O pacote =eshell= é parte integrante do Emacs.

#+begin_src emacs-lisp :tangle ./init.el
  (setup eshell
    (:if-package eshell)
    (setopt eshell-prompt-function 'atorres1985|eshell-prompt
            eshell-highlight-prompt nil))
#+end_src

** eat

#+begin_src emacs-lisp :tangle ./init.el
  (setup eat
    (:if-package eat)
    (setopt eat-eshell-fallback-if-stty-not-available t))
#+end_src

** display-line-numbers

#+begin_src emacs-lisp :tangle ./init.el
  (setup display-line-numbers)
#+end_src

** dynamic-ruler

#+begin_src emacs-lisp :tangle ./init.el
  (setup dynamic-ruler)
#+end_src

** deadgrep

O =deadgrep= [fn:lnk-deadgrep] é uma interface para o programa =ripgrep=, que
(como o nome sugere - ao menos para quem conhece o =grep=) pesquisa strings em
textos.

#+begin_src emacs-lisp :tangle ./init.el
  (setup deadgrep
    (:and (executable-find "rg")
          (:require deadgrep))
    (defalias 'dgrep 'deadgrep
      "Custom alias for deadgrep."))
#+end_src

** dwim-shell-command

#+begin_src emacs-lisp :tangle ./init.el
  (setup dwim-shell-command
    (:require dwim-shell-command)
    (:also-load dwim-shell-commands))
#+end_src

** all-the-icons

O pacote =all-the-icons= [fn:lnk-all-the-icons] fornece ícones bonitinhos para
diversos recursos do Emacs, especialmente o Dired.

#+begin_src emacs-lisp :tangle ./init.el
  (setup all-the-icons
    (:and (display-graphic-p)
      (:require all-the-icons)))
#+end_src

** Seção: Dired

Esta parte é um tanto mais complexa. Aqui entram quatro pacotes:

- =dired= e as extensões =dired-x=, já presentes no Emacs;
- =diredfl= [fn:lnk-diredfl] , um pacote fornece novas regras de /font lock/ ao
  Dired.
- =dirvish= [fn:lnk-dirvish], um pacote que customiza o Dired, transformando-o
  em um gerenciador de arquivos moderno e flexível.

#+begin_src emacs-lisp :tangle ./init.el
  (setup (:require dired dired-x diredfl dirvish)
    (set-face-attribute 'diredfl-dir-name nil :bold t)
    (:with-hook (dired-mode-hook dirvish-directory-view-mode)
      (:hook diredfl-mode))

    (setopt dirvish-use-mode-line t
            dirvish-use-header-line 'global)

    (setopt dirvish-mode-line-format
            '(:left (sort symlink) :right (omit yank index)))

    (setopt dirvish-attributes
            '(all-the-icons
              collapse
              file-size
              file-time
              git-msg
              subtree-state
              vc-state))

    (setopt dirvish-quick-access-entries
            '(("h" "~/"                          "Home")
              ("d" "~/Downloads/"                "Downloads")
              ("p" "/run/media/"                 "Pendrives")
              ("s" "/mnt/source-codes"           "Sources")
              ("t" "~/.local/share/Trash/files/" "TrashCan")))

    (setopt dired-listing-switches
            (string-join '("-l"
                           "--all"
                           "--inode"
                           "--human-readable"
                           "--group-directories-first"
                           "--no-group")
                         " "))

    ;; dirvish previews
    (dirvish-define-preview eza (file)
      "Use `eza' to generate directory preview."
      :require ("eza")
      (when (file-directory-p file) ; we only interest in directories here
        `(shell . ("eza" "--all"
                   "--bytes"
                   "--color=always"
                   "--group"
                   "--group-directories-first"
                   "--header"
                   "--icons"
                   "--inode"
                   "--long"
                   "--octal-permissions"
                   "--oneline"
                   ,file))))
    (cl-pushnew 'eza dirvish-preview-dispatchers)

    (dirvish-define-preview elinks (file)
      "Use `elinks' to generate HTML preview."
      :require ("elinks")
      (when (string-match (rx (or ".htm" ".html") line-end) file)
        `(shell . ("elinks"
                   "-dump"
                   "-localhost"
                   "-no-numbering"
                   "-no-references"
                   "-default-mime-type" "text/html"
                   "-dump-width" "80"
                   ,file))))
    (cl-pushnew 'elinks dirvish-preview-dispatchers)

    (dirvish-side-follow-mode)
    (dirvish-override-dired-mode +1))
#+end_src

** page-break-lines

#+begin_src emacs-lisp :tangle ./init.el
  (setup page-break-lines
    (:require page-break-lines)
    (setopt page-break-lines-modes nil
            page-break-lines-max-width 80)

    (dolist (mode '(compilation-mode
                    dashboard-mode
                    emacs-lisp-mode
                    help-mode
                    lisp-mode
                    outline-mode
                    scheme-mode))
      (add-to-list 'page-break-lines-modes mode))
    (page-break-lines-mode))
#+end_src

** Seção: Completação!



** magit

#+begin_src emacs-lisp :tangle ./init.el
  (setup magit)
#+end_src

** dashboard

#+begin_src emacs-lisp :tangle ./init.el
  (setup dashboard
    (:require dashboard)
    (setopt dashboard-banner-logo-title "Welcome to the Emacs Dashboard!"
            dashboard-center-content nil
            dashboard-page-separator "\n\n"
            dashboard-set-file-icons nil
            dashboard-set-heading-icons nil
            dashboard-show-shortcuts t
            dashboard-items '()
            dashboard-startup-banner 'logo)

    (add-to-list 'dashboard-items '(agenda . 5))
    (add-to-list 'dashboard-items '(bookmarks . 5))
    (add-to-list 'dashboard-items '(projects . 5))
    ;; (add-to-list 'dashboard-items '(recents . 5))
    (add-to-list 'dashboard-items '(registers . 5))

    (dashboard-setup-startup-hook))
#+end_src

** Seção: Tema

Minha intenção é selecionar o tema de acordo com a clássica trinca de
prioridades: valor default, variável de ambiente, linha de comando.

O problema é saber quais temas estão disponíveis, afinal não podemos correr o
risco de tentar estabelecer um tema que (ainda!) não existe e/ou não foi
instalado...

Ah sim: a função para isso é =custom-available-themes=.

Abaixo segue um teste.

#+begin_src emacs-lisp :tangle no
  (defun random-was-zero (N)
    "Return `t' if the random number generated was 0.

  Given that `random' function returns an integer value in the
  interval [0, `N'), this function returns `t' with probability
  1/`N'."
    (= 0 (random N)))

  (defun challenge (champ challenger N)
    "Carry out the challenge between champ and challenger!

  The `CHALLENGER' has one-in-`N' chances of winning against the `CHAMP'."
    (if (random-was-zero N) challenger champ))

  (defun pick-random-from (L)
    "Pick a random element from a list, with equal probability."
    (cond
     ((equal nil L) nil)
     (t
      (setq round 0
            end-of-list nil
            champ (car L)
            challengers (cdr L))
      (while (not end-of-list)
        (if (equal nil challengers)
            (setq end-of-list t)
          (progn
            (setq challenger (pop challengers))
            (setq round (1+ round))
            (setq champ (challenge champ challenger (+ round 1))))))
      champ)))

  (defun --load-random-theme ()
    (when (string-equal "--load-random-theme" argi)
      (setq chosen-theme (pick-random-from (custom-available-themes)))
      (message (format "%s%s%s"
                       "Random theme " chosen-theme ". . ."))
      (load-theme chosen-theme t nil)
      (message (format "%s%s%s"
                       "Random theme " chosen-theme ": done!"))))

  (cl-pushnew #'--load-random-theme command-line-functions)
#+end_src

Aqui setamos um tema.

#+begin_src emacs-lisp :tangle ./init.el
  (when (display-graphic-p)
    (load-theme 'ef-bio t nil))
#+end_src

** Seção: Fontes

#+begin_src emacs-lisp :tangle ./init.el
  (set-face-attribute 'default nil
                      :height 225)

  (set-face-attribute 'lazy-highlight nil
                      :foreground "black"
                      :background "green")
#+end_src

** Seção: Frames

#+begin_src emacs-lisp :tangle ./init.el
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
  (cl-pushnew '(width . 120) default-frame-alist) ; characters
  (cl-pushnew '(height . 36) default-frame-alist) ; lines
#+end_src

** Seção: Carregar customizações

#+begin_src emacs-lisp :tangle ./init.el
  (setopt custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file nil t))

  (let
      ((extra-lisp-dir (expand-file-name "extra-lisp.d" user-emacs-directory)))
    (when (file-accessible-directory-p extra-lisp-dir)
      (atorres1985|load-directory extra-lisp-dir)))
#+end_src

** Seção: Miscelânea

Aqui ficam algumas miscelâneas do Emacs para as quais não tenho um destino mais
preciso.

#+begin_src emacs-lisp :tangle ./init.el
  ;; Don't pop up UI dialogs when prompting
  (setopt use-dialog-box nil)

  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (global-unset-key (kbd "<insert>"))

  (defalias 'yes-or-no-p 'y-or-n-p
    "An alias for y-or-n-p to write less.")

  (setopt auto-save-interval 300
          auto-save-timeout 30
          delete-by-moving-to-trash nil
          inhibit-startup-screen t ; startup.el
          visible-bell t)

  (setopt
   initial-scratch-message ; startup.el
   (mapconcat 'identity
              '(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
                ";;; This buffer is for notes you don't want to save, and to Emacs Lisp code. ;;;"
                ";;; If you want to create a file, visit it with `M-x find-file' (usually     ;;;"
                ";;; bounded to `C-x C-f'), then insert text in the file's own buffer.        ;;;"
                ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")
              "\n"))

  (setq-default fill-column 80
                frame-resize-pixelwise t
                indent-tabs-mode nil
                major-mode 'text-mode
                tab-width 4
                window-resize-pixelwise t
                word-wrap t)

  (setq frame-title-format
        '(buffer-file-name
          "%b - %f"                        ; File buffer
          (dired-directory dired-directory ; Dired buffer
                           (revert-buffer-function
                            "%b"                                 ; Buffer Menu
                            ("%b - Dir: " default-directory))))) ; Plain buffer

  (setq load-prefer-newer t)
#+end_src

** Keybindings

O manual do Emacs tem uma seção dedicada a convenções de
keybindings [fn:lnk-KeyBindingConventions].

Minha intenção, no futuro, será coletar o código das keybindings em um canto só,
de tal maneira que seja possível ver todos de uma vez.

#+begin_src emacs-lisp :tangle ./init.el
  (setup bs
    (:require bs)
    (:global [remap list-buffers] bs-show))

  (setup display-line-numbers
    (:global (kbd "C-c l l") display-line-numbers-mode))

  (setup unfill
    (:global (kbd "C-c u p") unfill-paragraph)
    (:global (kbd "C-c u r") unfill-region)
    (:global (kbd "C-c u t") unfill-toggle))

  (setup helpful
    (:require helpful)
    (:global [remap describe-key] helpful-key)
    (:global [remap describe-function] helpful-callable)
    (:global [remap describe-command] helpful-command)
    (:global [remap describe-variable] helpful-variable)
    (:global (kbd "C-c h s") helpful-symbol)
    (:global (kbd "C-c h p") helpful-at-point))

  (setup dynamic-ruler
    (:if-package dynamic-ruler)
    ;; (:global (kbd "C-c r v") dynamic-ruler-vertical) ;; bugged!
    (:global (kbd "C-c r h") dynamic-ruler))

  (setup (:require dired dired-x diredfl dirvish)
    (:global (kbd "C-c d f") dirvish-fd)
    (:with-map dired-mode-map
      (defun atorres-1985|dired-find-file-other-frame ()
        "In Dired, visit this file or directory in another window."
        (interactive)
        (find-file-other-frame (dired-get-file-for-visit)))
      (:bind (kbd "F") #'atorres-1985|dired-find-file-other-frame))

    (:with-map dirvish-mode-map
      (:bind (kbd "a")   dirvish-quick-access)
      (:bind (kbd "f")   dirvish-file-info-menu)
      (:bind (kbd "y")   dirvish-yank-menu)
      (:bind (kbd "N")   dirvish-narrow)
      (:bind (kbd "^")   dirvish-history-last)
      (:bind (kbd "h")   dirvish-history-jump) ; remapped `describe-mode'
      (:bind (kbd "s")   dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
      ;; (:bind (kbd "v")   dirvish-vc-menu)   ; remapped `dired-view-file'
      (:bind "<tab>" dirvish-subtree-toggle) ;; kbd does not work!
      (:bind (kbd "M-f") dirvish-history-go-forward)
      (:bind (kbd "M-b") dirvish-history-go-backward)
      (:bind (kbd "M-l") dirvish-ls-switches-menu)
      (:bind (kbd "M-m") dirvish-mark-menu)
      (:bind (kbd "M-t") dirvish-layout-toggle)
      (:bind (kbd "M-s") dirvish-setup-menu)
      (:bind (kbd "M-e") dirvish-emerge-menu)
      (:bind (kbd "M-j") dirvish-fd-jump)))

  (setup magit
    (:if-package magit)
    (global-unset-key (kbd "C-x g"))
    (:global "C-c g s" magit-status))

  (setup dwim-shell-command
    (:if-package dwim-shell-command)
    (:global (kbd "C-c s !") dwim-shell-command))
#+end_src

** gcmh

O pacote =gcmh= [fn:lnk-gcmh] habilita um pequeno hack no coletor de lixo.

#+begin_src emacs-lisp :tangle ./init.el
  (setup gcmh
    (:require gcmh)
    (setopt gcmh-verbose nil)
    (gcmh-mode))
#+end_src

** Init - Tempo Final

Aqui registramos o momento em que o carregamento do =init.el= foi encerrado.

#+begin_src emacs-lisp :tangle ./init.el
  (defconst atorres-1985|init-finish-time (current-time)
    "Init finish time.")
#+end_src

E também uma tabela das diferenças de tempo!

#+begin_src emacs-lisp :tangle no
  (let*
      ((time-diff-early-init
        (time-subtract atorres-1985|early-init-finish-time
                       atorres-1985|early-init-start-time))
       (time-diff-init
        (time-subtract atorres-1985|init-finish-time
                       atorres-1985|init-start-time))
       (time-diff
        (time-subtract atorres-1985|init-finish-time
                       atorres-1985|early-init-start-time))
       (format-string "%Mmin %Ss.%3N")

       (str (concat
             "----------------------------------------\n"
             "Early init: " (format-time-string format-string time-diff-early-init) "\n"
             "Init: " (format-time-string format-string time-diff-init) "\n"
             "Full: " (format-time-string format-string time-diff) "\n"
             "----------------------------------------\n")))
    (message str))
#+end_src

** Footer

Porque isso precisa gerar um arquivo bonito.

#+begin_src emacs-lisp :tangle ./init.el
  (provide 'init)

  ;; Local Variables:
  ;; mode: emacs-lisp
  ;; coding: utf-8-unix
  ;; fill-column: 80
  ;; End:

  ;;; init.el ends here
#+end_src

* Comentários

* Referências

# - setopt vs setq

* Footnotes

[fn:lnk-diredfl] https://github.com/purcell/diredfl

[fn:lnk-all-the-icons]  https://github.com/domtronn/all-the-icons.el

[fn:lnk-clisp] https://clisp.sourceforge.io/

[fn:lnk-EarlyInitFile] https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html

[fn:lnk-InitFile] https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html

[fn:lnk-International] https://www.gnu.org/software/emacs/manual/html_node/emacs/International.html#International

[fn:lnk-KeyBindingConventions] https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

[fn:lnk-beginend] https://github.com/DamienCassou/beginend

[fn:lnk-crux] https://github.com/bbatsov/crux

[fn:lnk-deadgrep] https://github.com/Wilfred/deadgrep

[fn:lnk-dirvish] https://github.com/alexluigit/dirvish

[fn:lnk-gcmh] https://gitlab.com/koral/gcmh

[fn:lnk-hardcore-mode] https://github.com/magnars/hardcore-mode.el

[fn:lnk-latex] https://www.latex-project.org/

[fn:lnk-nixpkgs] https://github.com/NixOS/nixpkgs/

[fn:lnk-no-littering] https://github.com/emacscollective/no-littering

[fn:lnk-pdftools] https://pdftools.wiki/

[fn:lnk-setupel] https://www.emacswiki.org/emacs/SetupEl

[fn:lnk-unfill] https://github.com/purcell/unfill
